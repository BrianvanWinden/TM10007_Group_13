{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Code opgeschoond en werkend_random.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "cF2F_jjxW_wK",
        "gFrCH_KzXOBE",
        "_AECMogeXS0K"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/BrianvanWinden/TM10007_Group_13/blob/master/Assignment\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CCWkLy5fexAn"
      },
      "source": [
        "# Assignment arrhythmia classification"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gFrCH_KzXOBE"
      },
      "source": [
        "## Importing functions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N5x3ZkH7XPa0"
      },
      "source": [
        "# General packages\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "\n",
        "# Classifiers and kernels\n",
        "from scipy import stats\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC, LinearSVC\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.preprocessing import RobustScaler\n",
        "from sklearn.kernel_approximation import RBFSampler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics.pairwise import rbf_kernel, sigmoid_kernel\n",
        "from sklearn.metrics import auc, classification_report, confusion_matrix, precision_score, recall_score, accuracy_score, f1_score, roc_auc_score, roc_curve, balanced_accuracy_score\n",
        "\n",
        "# Model selection\n",
        "from sklearn.model_selection import RandomizedSearchCV, train_test_split, learning_curve, ShuffleSplit, StratifiedKFold\n",
        "\n",
        "# Sampling\n",
        "from imblearn.under_sampling import RandomUnderSampler\n",
        "\n",
        "import warnings\n",
        "warnings.simplefilter(action='ignore', category=FutureWarning)\n",
        "from sklearn.exceptions import ConvergenceWarning\n",
        "warnings.filterwarnings(\"ignore\", category=ConvergenceWarning)\n",
        "\n",
        "# Definitions\n",
        "def evaluation(y_val, y_pred, title = 'Confusion Matrix'):\n",
        "    con_matrix = confusion_matrix(y_val, y_pred)\n",
        "    precision_result = precision_score(y_val, y_pred)\n",
        "    recall_result = recall_score(y_val, y_pred)\n",
        "    accuracy_result = accuracy_score(y_val, y_pred)\n",
        "    f1_result = f1_score(y_val, y_pred)\n",
        "    # print('Recall: ', recall)\n",
        "    # print('Accuracy: ', accuracy)\n",
        "    # print('Precision: ', precision)\n",
        "    # print('F1: ', f1)\n",
        "    sns.heatmap(con_matrix,  cmap= 'PuBu', annot=True, fmt='g', annot_kws=    {'size':20})\n",
        "    plt.xlabel('predicted', fontsize=18)\n",
        "    plt.ylabel('actual', fontsize=18)\n",
        "    plt.title(title, fontsize=18)\n",
        "\n",
        "def plot_learning_curve(estimator, title, X, y, axes, ylim=None, cv=None,\n",
        "                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):\n",
        "    \n",
        "    axes.set_title(title)\n",
        "    if ylim is not None:\n",
        "        axes.set_ylim(*ylim)\n",
        "    axes.set_xlabel(\"Training examples\")\n",
        "    axes.set_ylabel(\"Score\")\n",
        "\n",
        "    train_sizes, train_scores, test_scores  = \\\n",
        "        learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs,\n",
        "                       train_sizes=train_sizes, scoring='roc_auc')\n",
        "    train_scores_mean = np.mean(train_scores, axis=1)\n",
        "    train_scores_std = np.std(train_scores, axis=1)\n",
        "    test_scores_mean = np.mean(test_scores, axis=1)\n",
        "    test_scores_std = np.std(test_scores, axis=1)\n",
        "\n",
        "    # Plot learning curve\n",
        "    axes.grid()\n",
        "    axes.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
        "                         train_scores_mean + train_scores_std, alpha=0.1,\n",
        "                         color=\"r\")\n",
        "    axes.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
        "                         test_scores_mean + test_scores_std, alpha=0.1,\n",
        "                         color=\"g\")\n",
        "    axes.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n",
        "                 label=\"Training score\")\n",
        "    axes.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n",
        "                 label=\"Cross-validation score\")\n",
        "    axes.legend(loc=\"best\")\n",
        "    return plt\n",
        "\n",
        "\n",
        "def roc_plotter(fpr, tpr):\n",
        "    \"\"\" Plot the ROC curve of the classifier for the given number of components\n",
        "\n",
        "    - param numpy.array fpr: False positive rate\n",
        "    - param numpy.array tpr: True positive rate\n",
        "    - param integer roc_auc: Area under the ROC curve\n",
        "    \"\"\"\n",
        "    plt.plot(fpr, tpr, linewidth=2)\n",
        "\n",
        "    # Properties ROC curve figure\n",
        "    plt.plot([0, 1], [0, 1], color='navy', linewidth=2, linestyle='--')\n",
        "    plt.xlim([0.0, 1.0])\n",
        "    plt.ylim([0.0, 1.05])\n",
        "    plt.xlabel('False Positive Rate')\n",
        "    plt.ylabel('True Positive Rate')\n",
        "    plt.title('ROC curve')\n",
        "    plt.legend(loc=\"lower right\")\n"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cF2F_jjxW_wK"
      },
      "source": [
        "## Assignment arrhythmia classification"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i1-5TqoFW8_e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b9dcadbf-295b-4ebe-f12d-7cb35169c462"
      },
      "source": [
        "# Run this to use from colab environment\n",
        "!git clone https://github.com/BrianvanWinden/TM10007_Group_13.git\n",
        "!unzip \"/content/TM10007_Group_13/ecg/ecg_data.zip\"\n",
        "\n",
        "data = pd.read_csv(\"ecg_data.csv\", index_col=0)\n",
        "\n",
        "data_points_org= data.drop(['label'], axis=1).to_numpy()\n",
        "data_labels_org= data['label'].to_numpy()\n",
        "\n",
        "# data_points = np.delete(data_points_org, [91, 284, 422, 611] , axis=0)\n",
        "# data_labels = np.delete(data_labels_org, [91, 284, 422, 611] , axis=0)\n",
        "\n",
        "data_points = data_points_org\n",
        "data_labels = data_labels_org\n",
        "\n",
        "print (data_labels.shape)\n",
        "print (data_points.shape)\n",
        "\n",
        "x_train_val, x_test, y_train_val, y_test = train_test_split(data_points, data_labels, test_size=0.2, stratify=data_labels)\n"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "fatal: destination path 'TM10007_Group_13' already exists and is not an empty directory.\n",
            "Archive:  /content/TM10007_Group_13/ecg/ecg_data.zip\n",
            "replace ecg_data.csv? [y]es, [n]o, [A]ll, [N]one, [r]ename: y\n",
            "  inflating: ecg_data.csv            \n",
            "(827,)\n",
            "(827, 9000)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_AECMogeXS0K"
      },
      "source": [
        "## Taking a look at the data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WQkqAm3RXWhd",
        "outputId": "60447439-d55f-4826-b4db-9ae1fd58760d"
      },
      "source": [
        "# Samples and features\n",
        "print(f'The number of samples: {len(data.index)}')\n",
        "shape_data = data_points.shape\n",
        "print(f'The number of features: {shape_data[1]}')\n",
        "total_datapoints = shape_data[0]*shape_data[1]\n",
        "print(f'Total number of datapoints: {total_datapoints}')\n",
        "healthy_patients = (list(data['label'] == 0)).count(True)\n",
        "print(f'The number of healthy patients: {healthy_patients}') \n",
        "sick_patients = (list(data['label'] == 1)).count(True)\n",
        "print(f'The number of sick patients: {sick_patients}')\n",
        "percentage_sick=sick_patients/(sick_patients+healthy_patients)\n",
        "print(f'Percentage of sick patients: {round(percentage_sick,2)*100}%')\n",
        "\n",
        "# Determine Z-scores \n",
        "z = np.abs(stats.zscore(data_points_org))\n",
        "outliers = np.where(z>3)\n",
        "number_outliers = len(outliers[1])\n",
        "print(f'Number of datapoints where the Z score is larger than 3: {number_outliers}')\n",
        "\n",
        "\n",
        "percentage = number_outliers/total_datapoints*100\n",
        "print(f'Percentage of outliers in total data: {round(percentage,2)}%')\n",
        "\n",
        "# Missing values\n",
        "missing_values = data.isna().sum()\n",
        "number_missing_values = missing_values.astype(bool).sum(axis=0)\n",
        "print(f'Number of missing data points:{number_missing_values}')\n"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The number of samples: 827\n",
            "The number of features: 9000\n",
            "Total number of datapoints: 7443000\n",
            "The number of healthy patients: 681\n",
            "The number of sick patients: 146\n",
            "Percentage of sick patients: 18.0%\n",
            "Number of datapoints where the Z score is larger than 3: 57812\n",
            "Percentage of outliers in total data: 0.78%\n",
            "Number of missing data points:0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vy0-beOPbAgL"
      },
      "source": [
        "## Learning curves"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ex7Fn9pubAGy"
      },
      "source": [
        "# # Learning Curve\n",
        "\n",
        "\n",
        "# clsfs = {'linSVC': LinearSVC(class_weight='balanced', dual=False, max_iter=10000), \n",
        "#           'SVMrbf':SVC(kernel='rbf', class_weight='balanced'), \n",
        "#           'SVMlin': SVC(kernel='linear', class_weight='balanced'), \n",
        "#           'Logreg': LogisticRegression(class_weight='balanced', dual=False, max_iter=10000),\n",
        "#           'knn': KNeighborsClassifier(weights='distance')}\n",
        "                  \n",
        "\n",
        "# num = 0\n",
        "# fig = plt.figure(figsize=(24,8*len(clsfs)))\n",
        "# ax = fig.add_subplot(7, 3, num + 1)\n",
        "# ax.scatter(data_points[:, 0], data_points[:, 1], marker='o', c=data_labels, \n",
        "#            s=25, edgecolor='k', cmap=plt.cm.Paired)\n",
        "\n",
        "# cv = ShuffleSplit(n_splits=2, test_size=0.2, random_state=0)\n",
        "# num = 1\n",
        "# for key, clf in clsfs.items():\n",
        "#     title = str(key)\n",
        "#     ax = fig.add_subplot(7, 3, num + 1)\n",
        "#     plot_learning_curve(clf, title, data_points, data_labels, ax, ylim=(0.3, 1.01), cv=cv)\n",
        "#     num += 1\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KMk1Tg7z_dFe"
      },
      "source": [
        "## PCA plot\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EkJ8qLa1_iti",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 591
        },
        "outputId": "7ce63eba-9ea1-4ed0-8723-79ed230eef1a"
      },
      "source": [
        "pca = PCA(n_components=0.99) \n",
        "pca = pca.fit(data_points)\n",
        "x_trans = pca.transform(data_points)\n",
        "explained_variance = pca.explained_variance_\n",
        "y = data_labels\n",
        "\n",
        "\n",
        "plt.figure(0)\n",
        "sns.scatterplot(x=x_trans[:, 0], y=x_trans[:, 1], hue=y) # Scatterplot of two first PCs\n",
        "plt.xlabel('PC1')\n",
        "plt.ylabel('PC2')\n",
        "plt.title('Scatterplot of two first PCs')\n",
        "\n",
        "plt.figure(1)\n",
        "plt.plot(np.cumsum(pca.explained_variance_ratio_))\n",
        "ratio = pca.explained_variance_ratio_.cumsum()\n",
        "plt.xlabel('Number of components')\n",
        "plt.ylabel('Cumulative explained variance')\n",
        "plt.title('Explained variance for number of principle components')\n",
        "plt.show\n"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E0ddx2i7Xajb"
      },
      "source": [
        "## Preprocessing and classifier validation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zaqV1Y1YXbar",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f32257db-cde2-4f83-a5c2-8a423586215e"
      },
      "source": [
        "# Splitting data  \n",
        "# Takes approximately 8 minutes to run\n",
        "\n",
        "cv_outer = StratifiedKFold(n_splits=5, shuffle=True)\n",
        "cv_inner = StratifiedKFold(n_splits=3, shuffle=True)\n",
        "outer_results = list()\n",
        "all_scores = list()\n",
        "models = list()\n",
        "\n",
        "for train_ix, val_ix in cv_outer.split(x_train_val,y_train_val):\n",
        "  # split data\n",
        "  x_train, x_val = x_train_val[train_ix, :], x_train_val[val_ix, :]\n",
        "  y_train, y_val = y_train_val[train_ix], y_train_val[val_ix]\n",
        "\n",
        "  #Resampling\n",
        "  resample = RandomUnderSampler(sampling_strategy='majority')\n",
        "  x_resampled, y_resampled = resample.fit_resample(x_train, y_train)\n",
        "\n",
        "  #Scaling\n",
        "  scaler = RobustScaler()\n",
        "  scaler.fit(x_resampled)\n",
        "  x_train_scaled = scaler.transform(x_resampled)\n",
        "  x_val_scaled = scaler.transform(x_val)\n",
        "\n",
        "  #PCA\n",
        "  pca = PCA(n_components=0.99)\n",
        "  pca = pca.fit(x_train_scaled)\n",
        "  x_train_trans = pca.transform(x_train_scaled)\n",
        "  x_val_trans = pca.transform(x_val_scaled)\n",
        "  print(f'Amount of training samples after resampling: {x_train_trans.shape[0]}')\n",
        "  print(f'Amount of features from PCA: {x_train_trans.shape[1]}')\n",
        "  model_params = {\n",
        "                  'svm_rbf': \n",
        "                  {'model': SVC(kernel='rbf', class_weight='balanced'),\n",
        "                    'params': {'C': np.arange(0.01,100,0.01),\n",
        "                               'gamma': np.arange(0.01,100,0.01)\n",
        "                               }\n",
        "                  },\n",
        "                   'svm_lin': \n",
        "                  {'model': SVC(kernel='linear', class_weight='balanced'),\n",
        "                    'params': {'C': np.arange(0.01,100,0.01)\n",
        "                               }\n",
        "                   },\n",
        "                  'linsvc': \n",
        "                  {'model': LinearSVC(class_weight='balanced', dual=False, max_iter=10000),\n",
        "                   'params':{'C': np.arange(0.01,100,0.01)\n",
        "                             }\n",
        "                  },\n",
        "                  'logreg':\n",
        "                  {'model': LogisticRegression(class_weight='balanced', dual=False, max_iter=10000),\n",
        "                   'params':{'C': np.arange(0.01,100,0.01)\n",
        "                             }                      \n",
        "                  },\n",
        "                  'knn':\n",
        "                  {'model': KNeighborsClassifier(weights='distance'),\n",
        "                   'params':{\n",
        "                        'n_neighbors': [5,10,15],\n",
        "                        'leaf_size': np.arange(1,100,1)\n",
        "                             }\n",
        "                   }\n",
        "                }\n",
        "\n",
        "  for model_name, mp in model_params.items():\n",
        "    search = RandomizedSearchCV(mp['model'], mp['params'], cv = cv_inner, scoring = 'roc_auc', return_train_score=True)\n",
        "    result = search.fit(x_train_scaled, y_resampled)\n",
        "    best_model = result.best_estimator_\n",
        "    models.append(best_model)\n",
        "    yhat = best_model.predict(x_val_scaled)\n",
        "    auc_score_val = roc_auc_score(y_val, yhat)\n",
        "    outer_results.append(auc_score_val)\n",
        "    all_scores.append(result.best_score_)\n",
        "    print(f' auc: {round(auc_score_val, 3)}, result.best_score_:{round(result.best_score_, 3)}, Model:{model_name}, best parameters:{result.best_params_}')\n",
        "    "
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Amount of training samples after resampling: 186\n",
            "Amount of features from PCA: 32\n",
            " auc: 0.5, result.best_score_:0.5, Model:svm_rbf, best parameters:{'gamma': 7.59, 'C': 59.38}\n",
            " auc: 0.693, result.best_score_:0.692, Model:svm_lin, best parameters:{'C': 78.79}\n",
            " auc: 0.684, result.best_score_:0.689, Model:linsvc, best parameters:{'C': 91.28}\n",
            " auc: 0.693, result.best_score_:0.733, Model:logreg, best parameters:{'C': 55.46}\n",
            " auc: 0.598, result.best_score_:0.647, Model:knn, best parameters:{'n_neighbors': 10, 'leaf_size': 86}\n",
            "Amount of training samples after resampling: 186\n",
            "Amount of features from PCA: 30\n",
            " auc: 0.514, result.best_score_:0.511, Model:svm_rbf, best parameters:{'gamma': 0.29000000000000004, 'C': 24.150000000000002}\n",
            " auc: 0.648, result.best_score_:0.72, Model:svm_lin, best parameters:{'C': 74.77000000000001}\n",
            " auc: 0.63, result.best_score_:0.739, Model:linsvc, best parameters:{'C': 26.78}\n",
            " auc: 0.648, result.best_score_:0.708, Model:logreg, best parameters:{'C': 75.25}\n",
            " auc: 0.553, result.best_score_:0.622, Model:knn, best parameters:{'n_neighbors': 5, 'leaf_size': 69}\n",
            "Amount of training samples after resampling: 188\n",
            "Amount of features from PCA: 137\n",
            " auc: 0.5, result.best_score_:0.5, Model:svm_rbf, best parameters:{'gamma': 89.91000000000001, 'C': 76.43}\n",
            " auc: 0.667, result.best_score_:0.605, Model:svm_lin, best parameters:{'C': 71.28}\n",
            " auc: 0.636, result.best_score_:0.659, Model:linsvc, best parameters:{'C': 74.09}\n",
            " auc: 0.667, result.best_score_:0.65, Model:logreg, best parameters:{'C': 54.85}\n",
            " auc: 0.605, result.best_score_:0.575, Model:knn, best parameters:{'n_neighbors': 15, 'leaf_size': 60}\n",
            "Amount of training samples after resampling: 188\n",
            "Amount of features from PCA: 154\n",
            " auc: 0.5, result.best_score_:0.5, Model:svm_rbf, best parameters:{'gamma': 99.39, 'C': 47.04}\n",
            " auc: 0.763, result.best_score_:0.737, Model:svm_lin, best parameters:{'C': 22.990000000000002}\n",
            " auc: 0.719, result.best_score_:0.714, Model:linsvc, best parameters:{'C': 15.91}\n",
            " auc: 0.767, result.best_score_:0.713, Model:logreg, best parameters:{'C': 79.48}\n",
            " auc: 0.549, result.best_score_:0.619, Model:knn, best parameters:{'n_neighbors': 15, 'leaf_size': 74}\n",
            "Amount of training samples after resampling: 188\n",
            "Amount of features from PCA: 39\n",
            " auc: 0.5, result.best_score_:0.5, Model:svm_rbf, best parameters:{'gamma': 15.42, 'C': 35.1}\n",
            " auc: 0.62, result.best_score_:0.687, Model:svm_lin, best parameters:{'C': 33.4}\n",
            " auc: 0.615, result.best_score_:0.728, Model:linsvc, best parameters:{'C': 0.44}\n",
            " auc: 0.62, result.best_score_:0.665, Model:logreg, best parameters:{'C': 59.99}\n",
            " auc: 0.523, result.best_score_:0.56, Model:knn, best parameters:{'n_neighbors': 15, 'leaf_size': 70}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C10micdFcCng"
      },
      "source": [
        "## Best classifier for test set"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AqnxvM-GcE4T",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "ded62b62-7275-4f8b-98c8-c0ba6751062d"
      },
      "source": [
        "models_df = pd.DataFrame(models)\n",
        "outer_results_df = pd.DataFrame(outer_results)\n",
        "all_scores_df = pd.DataFrame(all_scores)\n",
        "results = pd.concat([outer_results_df, all_scores_df, models_df], axis=1)\n",
        "results.columns = [ 'Auc score', 'Best score', 'Model']\n",
        "results_sorted = results.sort_values(by=['Auc score'], ascending=False)\n",
        "print('All calculated classifiers, ordered on AUC score:')\n",
        "display(results_sorted)\n",
        "\n",
        "best_classifier = results_sorted['Model'].iloc[0]\n",
        "print(f'The best classifier is: {best_classifier}')\n",
        "\n",
        "#Resampling\n",
        "resample = RandomUnderSampler(sampling_strategy='majority')\n",
        "X_resampled, y_resampled = resample.fit_resample(x_train_val, y_train_val)\n",
        "\n",
        "#Scaling\n",
        "scaler = RobustScaler()\n",
        "scaler.fit(X_resampled)\n",
        "x_train_scaled = scaler.transform(X_resampled)\n",
        "x_test_scaled = scaler.transform(x_test)\n",
        "\n",
        "#PCA\n",
        "pca = PCA(n_components=0.99)\n",
        "pca = pca.fit(x_train_scaled)\n",
        "x_train_trans = pca.transform(x_train_scaled)\n",
        "x_test_trans = pca.transform(x_test_scaled)\n",
        "\n",
        "# Evaluation classifier\n",
        "clf = best_classifier.fit(x_train_trans, y_resampled)\n",
        "y_pred = clf.predict(x_test_trans)\n",
        "y_score = clf.decision_function(x_test_trans)\n",
        "accuracy = balanced_accuracy_score(y_test, y_pred)\n",
        "auc_score = roc_auc_score(y_test, y_pred)\n",
        "print('Misclassified: %d / %d' % ((y_test != y_pred).sum(), x_test_trans.shape[0]))\n",
        "evaluation(y_test, y_pred)\n",
        "\n",
        "print(f'Auc score test data: {auc_score}')\n"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "All calculated classifiers, ordered on AUC score:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Auc score</th>\n",
              "      <th>Best score</th>\n",
              "      <th>Model</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>0.767451</td>\n",
              "      <td>0.713114</td>\n",
              "      <td>LogisticRegression(C=79.48, class_weight='bala...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>0.762864</td>\n",
              "      <td>0.736798</td>\n",
              "      <td>SVC(C=22.990000000000002, break_ties=False, ca...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>0.719386</td>\n",
              "      <td>0.714425</td>\n",
              "      <td>LinearSVC(C=15.91, class_weight='balanced', du...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.693234</td>\n",
              "      <td>0.733264</td>\n",
              "      <td>LogisticRegression(C=55.46, class_weight='bala...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.693234</td>\n",
              "      <td>0.691641</td>\n",
              "      <td>SVC(C=78.79, break_ties=False, cache_size=200,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.684060</td>\n",
              "      <td>0.688866</td>\n",
              "      <td>LinearSVC(C=91.28, class_weight='balanced', du...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>0.666733</td>\n",
              "      <td>0.604719</td>\n",
              "      <td>SVC(C=71.28, break_ties=False, cache_size=200,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>0.666733</td>\n",
              "      <td>0.649801</td>\n",
              "      <td>LogisticRegression(C=54.85, class_weight='bala...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.648148</td>\n",
              "      <td>0.720083</td>\n",
              "      <td>SVC(C=74.77000000000001, break_ties=False, cac...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.648148</td>\n",
              "      <td>0.707596</td>\n",
              "      <td>LogisticRegression(C=75.25, class_weight='bala...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0.635820</td>\n",
              "      <td>0.659458</td>\n",
              "      <td>LinearSVC(C=74.09, class_weight='balanced', du...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.629630</td>\n",
              "      <td>0.739161</td>\n",
              "      <td>LinearSVC(C=26.78, class_weight='balanced', du...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>0.619864</td>\n",
              "      <td>0.686709</td>\n",
              "      <td>SVC(C=33.4, break_ties=False, cache_size=200, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>0.619864</td>\n",
              "      <td>0.665496</td>\n",
              "      <td>LogisticRegression(C=59.99, class_weight='bala...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>0.615277</td>\n",
              "      <td>0.728397</td>\n",
              "      <td>LinearSVC(C=0.44, class_weight='balanced', dua...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0.605106</td>\n",
              "      <td>0.575193</td>\n",
              "      <td>KNeighborsClassifier(algorithm='auto', leaf_si...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.597859</td>\n",
              "      <td>0.647242</td>\n",
              "      <td>KNeighborsClassifier(algorithm='auto', leaf_si...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.553241</td>\n",
              "      <td>0.622442</td>\n",
              "      <td>KNeighborsClassifier(algorithm='auto', leaf_si...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>0.549063</td>\n",
              "      <td>0.618518</td>\n",
              "      <td>KNeighborsClassifier(algorithm='auto', leaf_si...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>0.522736</td>\n",
              "      <td>0.560289</td>\n",
              "      <td>KNeighborsClassifier(algorithm='auto', leaf_si...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.513889</td>\n",
              "      <td>0.510753</td>\n",
              "      <td>SVC(C=24.150000000000002, break_ties=False, ca...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>SVC(C=35.1, break_ties=False, cache_size=200, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>SVC(C=47.04, break_ties=False, cache_size=200,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>SVC(C=76.43, break_ties=False, cache_size=200,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>SVC(C=59.38, break_ties=False, cache_size=200,...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Auc score  Best score                                              Model\n",
              "18   0.767451    0.713114  LogisticRegression(C=79.48, class_weight='bala...\n",
              "16   0.762864    0.736798  SVC(C=22.990000000000002, break_ties=False, ca...\n",
              "17   0.719386    0.714425  LinearSVC(C=15.91, class_weight='balanced', du...\n",
              "3    0.693234    0.733264  LogisticRegression(C=55.46, class_weight='bala...\n",
              "1    0.693234    0.691641  SVC(C=78.79, break_ties=False, cache_size=200,...\n",
              "2    0.684060    0.688866  LinearSVC(C=91.28, class_weight='balanced', du...\n",
              "11   0.666733    0.604719  SVC(C=71.28, break_ties=False, cache_size=200,...\n",
              "13   0.666733    0.649801  LogisticRegression(C=54.85, class_weight='bala...\n",
              "6    0.648148    0.720083  SVC(C=74.77000000000001, break_ties=False, cac...\n",
              "8    0.648148    0.707596  LogisticRegression(C=75.25, class_weight='bala...\n",
              "12   0.635820    0.659458  LinearSVC(C=74.09, class_weight='balanced', du...\n",
              "7    0.629630    0.739161  LinearSVC(C=26.78, class_weight='balanced', du...\n",
              "21   0.619864    0.686709  SVC(C=33.4, break_ties=False, cache_size=200, ...\n",
              "23   0.619864    0.665496  LogisticRegression(C=59.99, class_weight='bala...\n",
              "22   0.615277    0.728397  LinearSVC(C=0.44, class_weight='balanced', dua...\n",
              "14   0.605106    0.575193  KNeighborsClassifier(algorithm='auto', leaf_si...\n",
              "4    0.597859    0.647242  KNeighborsClassifier(algorithm='auto', leaf_si...\n",
              "9    0.553241    0.622442  KNeighborsClassifier(algorithm='auto', leaf_si...\n",
              "19   0.549063    0.618518  KNeighborsClassifier(algorithm='auto', leaf_si...\n",
              "24   0.522736    0.560289  KNeighborsClassifier(algorithm='auto', leaf_si...\n",
              "5    0.513889    0.510753  SVC(C=24.150000000000002, break_ties=False, ca...\n",
              "20   0.500000    0.500000  SVC(C=35.1, break_ties=False, cache_size=200, ...\n",
              "15   0.500000    0.500000  SVC(C=47.04, break_ties=False, cache_size=200,...\n",
              "10   0.500000    0.500000  SVC(C=76.43, break_ties=False, cache_size=200,...\n",
              "0    0.500000    0.500000  SVC(C=59.38, break_ties=False, cache_size=200,..."
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "The best classifier is: LogisticRegression(C=79.48, class_weight='balanced', dual=False,\n",
            "                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n",
            "                   max_iter=10000, multi_class='auto', n_jobs=None,\n",
            "                   penalty='l2', random_state=None, solver='lbfgs', tol=0.0001,\n",
            "                   verbose=0, warm_start=False)\n",
            "Misclassified: 46 / 166\n",
            "Auc score test data: 0.7369745784042285\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X9nkWQVZZJgg"
      },
      "source": [
        "## ROC curve"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MVTzsMfOZLBw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "d7156477-6ce9-4bc1-9a2c-cee5ea7698f2"
      },
      "source": [
        "fpr = dict()\n",
        "tpr = dict()\n",
        "roc_auc = dict()\n",
        "fpr, tpr,_ = roc_curve(y_test, y_score)\n",
        "\n",
        "roc_plotter(fpr, tpr)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "No handles with labels found to put in legend.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}